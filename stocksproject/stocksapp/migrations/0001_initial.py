# Generated by Django 4.2.4 on 2024-01-18 07:46

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Next_filing_dates',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Next_Filing_Dates_Column1', models.IntegerField()),
                ('Next_Filing_Dates_StockID', models.IntegerField()),
                ('Next_Filing_Dates_Avg_Diff', models.IntegerField()),
                ('Next_Filing_Dates_DateDifference', models.IntegerField()),
                ('Next_Filing_Dates_FiscalQuarter', models.IntegerField()),
                ('Next_Filing_Dates_FiscalQuarterEnd', models.CharField(max_length=30)),
                ('Next_Filing_Dates_Next_FD', models.CharField(max_length=30)),
                ('Next_Filing_Dates_Remaining_Days', models.IntegerField()),
                ('Next_Filing_Dates_Avg_EEPS', models.FloatField()),
                ('Next_Filing_Dates_Avg_FEPS', models.FloatField()),
                ('Next_Filing_Dates_Next_Actual_EPS', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='stock_Earnings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Stock_Earnings_Date', models.CharField(max_length=30)),
                ('Stock_Earnings_Estimated_EPS', models.FloatField()),
                ('Stock_Earnings_Actual_EPS', models.FloatField()),
                ('Stock_Earnings_StockID', models.IntegerField()),
                ('Stock_Earnings_Surprise', models.FloatField()),
                ('Stock_Earnings_End_of_Quarter', models.CharField(max_length=30)),
                ('Stock_Earnings_EPS_Estimate_isNull', models.IntegerField()),
                ('Stock_Earnings_Reported_EPS_isNull', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Stock_ID',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stock_name', models.CharField(max_length=30)),
                ('stock_id', models.IntegerField(unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Stock_Naics_Table',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Stock_Naics_Column1', models.CharField(max_length=30)),
                ('Stock_Naics_Level', models.IntegerField()),
                ('Stock_Naics_Hierarchical_structure', models.CharField(max_length=30)),
                ('Stock_Naics_Code', models.IntegerField()),
                ('Stock_Naics_Parent', models.IntegerField()),
                ('Stock_Naics_Class_title', models.TextField(max_length=250)),
                ('Stock_Naics_Superscript', models.CharField(max_length=30)),
                ('Stock_Naics_Class_definition', models.CharField(max_length=30)),
                ('Stock_Naics_symbol', models.CharField(max_length=30)),
                ('Stock_Naics_StockID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='stocksapp.stock_id')),
            ],
        ),
        migrations.CreateModel(
            name='stock_historical_data_v3',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Stock_Historical_Data_V3_Column1', models.IntegerField()),
                ('Stock_Historical_Data_V3_Year', models.IntegerField()),
                ('Stock_Historical_Data_V3_FilingDate', models.IntegerField()),
                ('Stock_Historical_Data_V3_FiscalQuarterEnd', models.CharField(max_length=30)),
                ('Stock_Historical_Data_V3_FQE_10', models.CharField(max_length=30)),
                ('Stock_Historical_Data_V3_Price_Next_Day', models.FloatField()),
                ('Stock_Historical_Data_V3_Previous_Price', models.FloatField()),
                ('Stock_Historical_Data_V3_Impact', models.FloatField()),
                ('Stock_Historical_Data_V3_Impact_2', models.FloatField()),
                ('Stock_Historical_Data_V3_StockID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='stocksapp.stock_id')),
            ],
        ),
        migrations.CreateModel(
            name='Stock_Details_Table',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Stock_Details_Symbol', models.CharField(max_length=30)),
                ('Stock_Details_Name', models.CharField(max_length=30)),
                ('Stock_Details_Description', models.TextField(max_length=250)),
                ('Stock_Details_Country', models.CharField(max_length=30)),
                ('Stock_Details_State', models.CharField(max_length=30)),
                ('Stock_Details_Sector', models.CharField(max_length=30)),
                ('Stock_Details_Industry', models.CharField(max_length=30)),
                ('Stock_Details_Total_Revenue', models.CharField(max_length=30)),
                ('Stock_Details_NAICS_Code', models.IntegerField()),
                ('Stock_Details_StockID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='stocksapp.stock_id', to_field='stock_id')),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
